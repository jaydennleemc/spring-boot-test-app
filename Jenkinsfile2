def rtServer, buildInfo, rtGradle

pipeline {
  agent any
   parameters {
        string (name: 'ART_URL', defaultValue: 'http://20.24.71.53:8081/artifactory', description: 'Artifactory where artifacts will be deployed/resolved')
        string (name: 'ART_USER', defaultValue: 'admin', description: 'Artifactory user for deploy/resolve artifacts')
        string (name: 'ART_PASSWORD', defaultValue: 'Viseo2022!', description: 'Artifactory password for deploy/resolve artifacts')
        string (name: 'ART_RELEASE_REPO', defaultValue: 'java-web-app', description: 'Virtual Repository where artifacts will be deployed/resolved (Releases)')
        string (name: 'ART_SNAPSHOT_REPO', defaultValue: 'java-web-app1', description: 'Virtual Repository where artifacts will be deployed/resolved (Snapshots)')
        booleanParam (name: 'XRAY_SCAN', defaultValue: false, description: 'Scan artifacts using Xray')
        booleanParam (name: 'FAIL_BUILD', defaultValue: false, description: 'Fail build if any violation is found in Xray')
    }
  environment {
    ACCESS_TOKEN = credentials('jfrog_access_token')
    JAR_FILE = 'build/libs/jfrog-spring-boot-0.0.1-SNAPSHOT.jar'
    REPOSITORY_NAME = 'java-web-app/'
  }
  stages {
      stage('Init properties'){
            steps {
                script {
                    rtServer = Artifactory.newServer url: "${params.ART_URL}", username: "${params.ART_USER}", password: "${params.ART_PASSWORD}"
                    rtGradle = Artifactory.newGradleBuild()
                    buildInfo = Artifactory.newBuildInfo()
                    // This variables should be PARAMETERIZED
                    rtGradle.deployer repo: 'libs-release-local', server: rtServer
                    rtGradle.resolver repo: 'libs-release', server: rtServer
                    rtGradle.deployer.deployArtifacts = false
                    rtGradle.tool = 'G4'
                }
            }
        }

         stage('Checkout'){
            steps {
                sh 'rm -rf *'
                echo 'clone project source code'
                sh 'git clone https://github.com/jaydennleemc/spring-boot-test-app.git' //JFrog main project examples repository
            }
        }

        stage('Build'){
            steps {
                script {
                    echo 'cleaning project...'
                    sh 'cd spring-boot-test-app && ./gradlew clean'
                    echo 'Build project....'
                    sh 'cd spring-boot-test-app && ./gradlew build'
                }
            }
        }
        stage('Publish'){
            steps {
                script {
                    rtServer.publishBuildInfo buildInfo
                }
            }
        }

        stage('Xray Scan'){
            when {
                expression { return params.XRAY_SCAN }
            }
            steps {
                script {
                    xrayConfig = [
                        'buildName'     : buildInfo.name,
                        'buildNumber'    : buildInfo.number,
                        'failBuild'     : "${params.FAIL_BUILD}".toBoolean()
                    ]
                    xrayResults = rtServer.xrayScan xrayConfig
                    echo xrayResults as String
                }
            }
        }
  }

  post {
    // always execute if all stages finished
    always {
      echo 'Cleaning up...'
    //   sh './gradlew clean'
    }
    // execute if any stage success
    success {
      echo 'Build success'
    }
    // execute if any stage failed
    failure {
      echo 'Build failed'
    }
  }
}
